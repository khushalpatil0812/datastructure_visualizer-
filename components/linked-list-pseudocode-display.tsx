interface LinkedListPseudocodeDisplayProps {
  listType: "singly" | "doubly"
  operation: string
}

export function LinkedListPseudocodeDisplay({ listType, operation }: LinkedListPseudocodeDisplayProps) {
  const getPseudocode = () => {
    const isSingly = listType === "singly"
    
    switch (operation) {
      case "insert":
        return isSingly ? [
          "procedure insertNode(head: pointer to Node, value: any, position: integer)",
          "    newNode = new Node(value)",
          "    if position = 0 then",
          "        newNode.next = head",
          "        return newNode  // New head",
          "    end if",
          "",
          "    current = head",
          "    for i = 0 to position-2 do",
          "        if current = null then",
          "            return head  // Position out of bounds",
          "        end if",
          "        current = current.next",
          "    end for",
          "",
          "    if current = null then",
          "        return head  // Position out of bounds",
          "    end if",
          "",
          "    newNode.next = current.next",
          "    current.next = newNode",
          "    return head",
          "end procedure"
        ] : [
          "procedure insertNode(head: pointer to Node, value: any, position: integer)",
          "    newNode = new Node(value)",
          "    if position = 0 then",
          "        newNode.next = head",
          "        if head ≠ null then",
          "            head.prev = newNode",
          "        end if",
          "        return newNode  // New head",
          "    end if",
          "",
          "    current = head",
          "    for i = 0 to position-2 do",
          "        if current = null then",
          "            return head  // Position out of bounds",
          "        end if",
          "        current = current.next",
          "    end for",
          "",
          "    if current = null then",
          "        return head  // Position out of bounds",
          "    end if",
          "",
          "    newNode.next = current.next",
          "    newNode.prev = current",
          "    if current.next ≠ null then",
          "        current.next.prev = newNode",
          "    end if",
          "    current.next = newNode",
          "    return head",
          "end procedure"
        ]
      case "delete":
        return isSingly ? [
          "procedure deleteNode(head: pointer to Node, position: integer)",
          "    if head = null then",
          "        return null  // Empty list",
          "    end if",
          "",
          "    if position = 0 then",
          "        temp = head.next",
          "        delete head",
          "        return temp  // New head",
          "    end if",
          "",
          "    current = head",
          "    for i = 0 to position-2 do",
          "        if current.next = null then",
          "            return head  // Position out of bounds",
          "        end if",
          "        current = current.next",
          "    end for",
          "",
          "    if current.next = null then",
          "        return head  // Position out of bounds",
          "    end if",
          "",
          "    temp = current.next",
          "    current.next = temp.next",
          "    delete temp",
          "    return head",
          "end procedure"
        ] : [
          "procedure deleteNode(head: pointer to Node, position: integer)",
          "    if head = null then",
          "        return null  // Empty list",
          "    end if",
          "",
          "    if position = 0 then",
          "        temp = head.next",
          "        if temp ≠ null then",
          "            temp.prev = null",
          "        end if",
          "        delete head",
          "        return temp  // New head",
          "    end if",
          "",
          "    current = head",
          "    for i = 0 to position-1 do",
          "        if current = null then",
          "            return head  // Position out of bounds",
          "        end if",
          "        current = current.next",
          "    end for",
          "",
          "    if current = null then",
          "        return head  // Position out of bounds",
          "    end if",
          "",
          "    if current.prev ≠ null then",
          "        current.prev.next = current.next",
          "    end if",
          "    if current.next ≠ null then",
          "        current.next.prev = current.prev",
          "    end if",
          "    delete current",
          "    return head",
          "end procedure"
        ]
